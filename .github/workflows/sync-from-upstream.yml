name: Sync from Upstream

on:
  schedule:
    - cron: '0 * * * *' # every hour
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    if: github.repository == 'hafslundecovannkraft/stratus-gh-actions' # Only run on the forked repository
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream and fetch
        env:
          UPSTREAM_REPO: stratus-test/stratus-gh-actions
        run: |
          git remote add upstream https://github.com/$UPSTREAM_REPO.git
          git fetch upstream --tags
          git fetch upstream main

      - name: Push tags to origin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin --tags

      - name: Force update main branch from upstream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout main
          git reset --hard upstream/main
          git push origin main --force

      - name: Mirror latest release from upstream
        uses: actions/github-script@v7
        with:
          script: |
            const upstream = 'stratus-test/stratus-gh-actions';
            const [owner, repo] = upstream.split('/');

            // Get all releases from upstream
            const { data: upstreamReleases } = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });

            // Get all releases in the current repo
            const { data: forkReleases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const forkTags = new Set(forkReleases.map(r => r.tag_name));

            // Mirror releases that don't exist in the fork
            for (const release of upstreamReleases) {
              if (!forkTags.has(release.tag_name)) {
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: release.tag_name,
                  name: release.name,
                  body: release.body,
                  draft: release.draft,
                  prerelease: release.prerelease,
                  target_commitish: release.target_commitish || 'main'
                });
              }
            }